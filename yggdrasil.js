'use strict';

console.log('info: üå≥   Starting Yggdrasil');
console.log('info: üå±   Planting the seed... (loading the config and core lib)');
console.time('time: ‚è±   Planting and make the seed to grow took');

const ObjectID = require('mongodb').ObjectID;
const express = require('express');

// Yggdrasil is an express instance
let yggdrasil = express();
yggdrasil._startedAt = {
  time: Date.now(),
  hr: process.hrtime()
};

yggdrasil.rootPath = __dirname;

yggdrasil.socketIOListeners = [];

/**
 * Configuration loader
 * @param jsonConfig -  the specific json configuration (allow specific config for testing purposes)
 */
yggdrasil.loadConfig = jsonConfig => {
  if (jsonConfig) {
    yggdrasil.config = jsonConfig;
  } else {
    yggdrasil.config = require('rc')('yggdrasil', require('./defaultConfig'));
  }
};

/**
 * Returns an UUID generated by Mongo ObjectID
 * returns a real ObjectID
 * @param {boolean} returnString -  if true, send the hex string from ObjectID
 * @returns {string|ObjectID}
 */
yggdrasil.uuid = (returnString = false) => {
  let theUuid = new ObjectID();
  if (!returnString) {
    return theUuid;
  }
  return theUuid.toHexString();
};

/** Load the main Lib **/
yggdrasil.lib = require('./lib');

/**
 * Allow to kill the current instance of Yggdrasil
 * @param _yggdrasil
 * @param callback
 * @returns {Promise<void>}
 */
yggdrasil.kill = async (_yggdrasil, callback) => {
  if (_yggdrasil.functionalTestingMode) {
    _yggdrasil = await _yggdrasil.cleanupFunctionalTestingdata(_yggdrasil);
  }
  _yggdrasil.server.serverObject.close(async function () {
    _yggdrasil.logger.info('üöß  The HTTP server is now closed');
    _yggdrasil.logger.info('üîå  Disconnect from Redis and Mongo...');
    await _yggdrasil.storage.mongo.disconnect();
    _yggdrasil.storage.redis.disconnect();
    _yggdrasil.logger.info('üíÄ  Yggdrasil will die soon.');

    if (callback) {
      callback();
    }
    _yggdrasil.logger.info('üññ  Bye.');
    process.exit(130);
  });
};
/**
 * Kill the current instance when the process receive the SIGINT signal
 */
process.on('SIGINT', async () => {
  await yggdrasil.kill(yggdrasil);
});

console.timeEnd('time: ‚è±   Planting and make the seed to grow took');

/**
 * Start Yggdrasil !
 */
yggdrasil.lib.startup(yggdrasil);

module.exports = yggdrasil;