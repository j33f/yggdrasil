resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
  - name: CRM-Backend-dev-PR
    type: pull-request
    icon: github-circle
    webhook_token: ((webhook-token))
    source:
      repository: Net-Acheteur/CRM-Backend
      access_token: ((github-access-token))

  - name: redis
    type: docker-image
    icon: docker
    source:
      repository: redis
      tag: alpine
  - name: mongo
    type: docker-image
    icon: docker
    source:
      repository: mongo
      tag: latest
  - name: postfix
    type: docker-image
    icon: docker
    source:
      repository: j33f/alpine-postfix
      tag: latest
  - name: backend
    type: docker-image
    icon: docker
    source:
      repository: j33f/node-docker-container
      tag: pupeteer-unoconv

jobs:
  - name: Tests
    plan:
      - get: CRM-Backend-dev-PR
        trigger: true
        version: every
      - put: CRM-Backend-dev-PR
        params:
          path: CRM-Backend-dev-PR
          status: pending
      - get: redis
        params: {save: true}
      - get: mongo
        params: {save: true}
      - get: postfix
        params: {save: true}
      - get: backend
        params: {save: true}
      - task: Tests
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: amidos/dcind
          inputs:
            - name: CRM-Backend-dev-PR
            - name: redis
            - name: mongo
            - name: postfix
            - name: backend
          caches:
            - path: redis
            - path: mongo
            - path: postfix
            - path: backend
            - path: /var/lib/docker/
            - path: CRM-Backend-dev-PR/node_modules
            - path: /root/.npm
            - path: /root/.ssh
          outputs:
            - name: coverage
              path: CRM-Backend-dev-PR/coverage
          params:
            GIT_PRIVATE_KEY: ((git-private-key))
            GIT_SSH_COMMAND: 'ssh -o "BatchMode yes" -o "StrictHostKeyChecking=no"'
          run:
            path: bash
            args:
              - -cex
              - |
                STARTUP_TIMEOUT=60
                source /docker-lib.sh
                start_docker

                # keep those lines just in case
                #docker load -i redis/image
                #docker tag "$(cat redis/image-id)" "$(cat redis/repository):$(cat redis/tag)"

                #docker load -i mongo/image
                #docker tag "$(cat mongo/image-id)" "$(cat mongo/repository):$(cat mongo/tag)"

                #docker load -i postfix/image
                #docker tag "$(cat postfix/image-id)" "$(cat postfix/repository):$(cat postfix/tag)"

                #docker load -i backend/image
                #docker tag "$(cat backend/image-id)" "$(cat backend/repository):$(cat backend/tag)"

                mkdir -p /root/.ssh
                echo "$GIT_PRIVATE_KEY" > /root/.ssh/id_rsa
                chmod 600 /root/.ssh/id_rsa

                # launch the stack and tests
                docker-compose -f ${PWD}/CRM-Backend-dev-PR/docker-compose/concourse.yml run backend bash -c "/run.sh"
                # shutdown the stack
                docker-compose -f ${PWD}/CRM-Backend-dev-PR/docker-compose/concourse.yml down
                # remove volumes
                docker volume rm $(docker volume ls -q)
        on_failure:
          put: CRM-Backend-dev-PR
          params:
            path: CRM-Backend-dev-PR
            status: failure
      - put: CRM-Backend-dev-PR
        params:
          path: CRM-Backend-dev-PR
          status: success
          comment_file: coverage/coverage.combined.txt
